package nu.hex.mediatype.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import nu.hex.mediatype.Main;
import nu.hex.mediatype.file.SimpleFileWriter;
import nu.hex.mediatype.mtd2java.MtdParser;

/**
 *
 * @author hln
 */
public class MediaTypeEditorDialog extends javax.swing.JDialog {

    private static final String[] INFO_MESSAGES = new String[]{"Filändelse", "Här fyller du i en kort beskrivning av mediatypen.", "Den bör inte vara längre än några få rader."};
    private static final String SELECT_MEDIA_TYPE = "Välj mediatyp att redigera";
    private static final String INTEFACE_TARGET_PATH = "src/main/java/nu/hex/mediatype/";
    private static final String MTD_TARGET_PATH = "src/main/resources/";
    private static final String HEX_MEDIA_TYPES = "HexMediaType";
    private static final String COMMON_MEDIA_TYPES = "CommonMediaType";
    private final SourceProvider provider = new SourceProvider();
    private Map<String, String[]> mediaTypeMap;

    public MediaTypeEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle(HEX_MEDIA_TYPES);
        readFromMtd();
        populateList();
        populateFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editMediaTypesPanel = new javax.swing.JPanel();
        existingMediaTypesComboBox = new javax.swing.JComboBox();
        mediaTypeLabel = new javax.swing.JLabel();
        newTypeButton = new javax.swing.JButton();
        mediaTypeTextField = new javax.swing.JTextField();
        fileSuffixLabel = new javax.swing.JLabel();
        fileSuffixTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        commonMediaTypesCheckBox = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        updateCreateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        statusMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        existingMediaTypesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        existingMediaTypesComboBox.setToolTipText("Välj mediatyp för att redigera beskrivningen");
        existingMediaTypesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingMediaTypesComboBoxActionPerformed(evt);
            }
        });

        mediaTypeLabel.setText("Mediatyp:");

        newTypeButton.setText("Ny mediatyp");
        newTypeButton.setToolTipText("Skapa ny mediatyp");
        newTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTypeButtonActionPerformed(evt);
            }
        });

        mediaTypeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mediaTypeTextFieldFocusGained(evt);
            }
        });

        fileSuffixLabel.setText("Filändelse:");

        descriptionLabel.setText("Beskrivning:");
        descriptionLabel.setToolTipText("Beskrivning av mediatypen. Bör inte vara längre än några få rader.");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setToolTipText("Beskrivning av mediatypen. Bör inte vara längre än några få rader.");
        descriptionScrollPane.setViewportView(descriptionTextArea);

        commonMediaTypesCheckBox.setText("Allmäna mediatyper");
        commonMediaTypesCheckBox.setToolTipText("Lägg till en mediatyp i listan över allmänna mediatyper");
        commonMediaTypesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonMediaTypesCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editMediaTypesPanelLayout = new javax.swing.GroupLayout(editMediaTypesPanel);
        editMediaTypesPanel.setLayout(editMediaTypesPanelLayout);
        editMediaTypesPanelLayout.setHorizontalGroup(
            editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMediaTypesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(existingMediaTypesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addComponent(mediaTypeTextField)
                    .addGroup(editMediaTypesPanelLayout.createSequentialGroup()
                        .addGroup(editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editMediaTypesPanelLayout.createSequentialGroup()
                                .addComponent(fileSuffixLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fileSuffixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(editMediaTypesPanelLayout.createSequentialGroup()
                        .addComponent(mediaTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(newTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(commonMediaTypesCheckBox)))
                .addContainerGap())
        );
        editMediaTypesPanelLayout.setVerticalGroup(
            editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMediaTypesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(existingMediaTypesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mediaTypeLabel)
                    .addComponent(newTypeButton)
                    .addComponent(commonMediaTypesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mediaTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editMediaTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSuffixLabel)
                    .addComponent(fileSuffixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(editMediaTypesPanel, java.awt.BorderLayout.CENTER);

        cancelButton.setText("Avbryt");
        cancelButton.setToolTipText("Avbryt redigering av mediatypen");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Spara");
        saveButton.setToolTipText("Spara den redigerade mediatypen");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        updateCreateButton.setText("Uppdatera");
        updateCreateButton.setToolTipText("Spara ändringar för mtd och uppdatera interfacet.");
        updateCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCreateButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Avsluta");
        closeButton.setToolTipText("Avsluta programmet");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateCreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(updateCreateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void updateCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCreateButtonActionPerformed
        new SwingWorker<File, Void>() {

            @Override
            protected File doInBackground() throws Exception {
                return updateMtdFile(false, 5);
            }

            @Override
            protected void done() {
                Timer timer = new Timer(4000, (ActionEvent arg0) -> {
                    updateMediaTypeInterface();
                });
                timer.setRepeats(false);
                timer.start();
            }
        }.execute();
    }//GEN-LAST:event_updateCreateButtonActionPerformed

    private void existingMediaTypesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingMediaTypesComboBoxActionPerformed
        populateFields();
    }//GEN-LAST:event_existingMediaTypesComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearFields();
        readFromMtd();
        populateList();
        newTypeButton.setEnabled(true);
        commonMediaTypesCheckBox.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        updateMtdFile();
        populateList();
        if (!mediaTypeTextField.getText().equals("")) {
            existingMediaTypesComboBox.setSelectedItem(mediaTypeTextField.getText());
        }
        newTypeButton.setEnabled(true);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void newTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTypeButtonActionPerformed
        clearFields();
        newTypeButton.setEnabled(false);
        mediaTypeTextField.requestFocus();
    }//GEN-LAST:event_newTypeButtonActionPerformed

    private void mediaTypeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mediaTypeTextFieldFocusGained
        handleMediaTypeTextField();
    }//GEN-LAST:event_mediaTypeTextFieldFocusGained

    private void commonMediaTypesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonMediaTypesCheckBoxActionPerformed
        clearFields();
        this.setTitle(commonMediaTypesCheckBox.isSelected() ? COMMON_MEDIA_TYPES : HEX_MEDIA_TYPES);
        commonMediaTypesCheckBox.setEnabled(false);
        commonMediaTypesCheckBox.setToolTipText("Du kan inte byta förrän du har klickat \"Uppdatera\" eller \"Avbryt\".");
        readFromMtd();
        populateList();
    }//GEN-LAST:event_commonMediaTypesCheckBoxActionPerformed

    private void handleMediaTypeTextField() {
        String key = mediaTypeTextField.getText();
        if (key != null && !key.isEmpty() && mediaTypeMap.containsKey(key)) {
            mediaTypeTextField.setEnabled(false);
        } else {
            mediaTypeTextField.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediaTypeEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MediaTypeEditorDialog dialog = new MediaTypeEditorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox commonMediaTypesCheckBox;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JPanel editMediaTypesPanel;
    private javax.swing.JComboBox existingMediaTypesComboBox;
    private javax.swing.JLabel fileSuffixLabel;
    private javax.swing.JTextField fileSuffixTextField;
    private javax.swing.JLabel mediaTypeLabel;
    private javax.swing.JTextField mediaTypeTextField;
    private javax.swing.JButton newTypeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JButton updateCreateButton;
    // End of variables declaration//GEN-END:variables
    private void readFromMtd() {
        try {
            InputStream source;
            if (commonMediaTypesCheckBox != null) {
                source = commonMediaTypesCheckBox.isSelected() ? provider.getCommonMediaTypesSource() : provider.getHexMediaTypesSource();
            } else {
                source = provider.getHexMediaTypesSource();
            }
            mediaTypeMap = new TreeMap<>();
            BufferedReader reader = new BufferedReader(new InputStreamReader(source, Main.MTD_ENCODING));
            setStatusMessage("Läser data från MTD.", 2);
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.isEmpty()) {
                    String key;
                    String[] value;
                    if (line.startsWith("MediaType")) {
                        key = SELECT_MEDIA_TYPE;
                        value = INFO_MESSAGES;
                    } else {
                        key = line.split(";")[0];
                        value = line.substring(line.indexOf(";") + 1).split(";");
                    }
                    mediaTypeMap.put(key, value);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MediaTypeEditorDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private File writeToMtd() {
        StringBuilder result = new StringBuilder();
        SortedSet<String> lines = new TreeSet<>();
        mediaTypeMap.keySet().stream().forEach((key) -> {
            if (key.equals(SELECT_MEDIA_TYPE)) {
                result.append("MediaType;Suffix;Description...\n");
            } else {
                String line = key;
                for (String desc : mediaTypeMap.get(key)) {
                    line += ";" + desc.trim();
                }
                lines.add(line);
            }
        });
        lines.stream().forEach((line) -> {
            result.append(line).append("\n");
        });
        String path = MTD_TARGET_PATH;
        if (commonMediaTypesCheckBox.isSelected()) {
            path += COMMON_MEDIA_TYPES + "s.mtd";
        } else {
            path += HEX_MEDIA_TYPES + "s.mtd";
        }
        File mtdFile = new File(path);
        mtdFile.getParentFile().mkdirs();
        return new SimpleFileWriter(result.toString(), mtdFile, Main.MTD_ENCODING).write();
    }

    private void clearFields() {
        existingMediaTypesComboBox.setSelectedIndex(0);
        mediaTypeTextField.setText("");
        fileSuffixTextField.setText("");
        descriptionTextArea.setText("");
    }

    private void updateMediaTypeInterface() {
        String target = commonMediaTypesCheckBox.isSelected() ? COMMON_MEDIA_TYPES : HEX_MEDIA_TYPES;
        try {
            String parse = new MtdParser(target).parse();
            new SimpleFileWriter(parse, new File(INTEFACE_TARGET_PATH + target + ".java")).write();
            setStatusMessage("Intefacet har uppdaterats.", 2);
            commonMediaTypesCheckBox.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(MediaTypeEditorDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private File updateMtdFile() {
        return updateMtdFile(true, 2);
    }

    private File updateMtdFile(boolean shouldEnableClose, int timerSeconds) {
        String key = mediaTypeTextField.getText().trim();
        if (!key.isEmpty()) {
            String valueString = fileSuffixTextField.getText().trim().replaceAll("\\.", "") + "\n" + descriptionTextArea.getText().trim();
            String[] value = valueString.split("\n");
            mediaTypeMap.put(key, value);
            File mtdFile = writeToMtd();
            setStatusMessage("MTD-filen uppdaterad.", timerSeconds, shouldEnableClose);
            return mtdFile;
        }
        return null;
    }

    private void populateList() {
        Object[] items = this.mediaTypeMap.keySet().toArray();
        existingMediaTypesComboBox.setModel(new DefaultComboBoxModel(items));
    }

    private void populateFields() {
        String mediaType = (String) existingMediaTypesComboBox.getSelectedItem();
        String suffix = "";
        String[] descriptionLines = mediaTypeMap.get(mediaType);
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < descriptionLines.length; i++) {
            if (i > 1) {
                builder.append("\n");
            }
            if (i == 0) {
                suffix = descriptionLines[i].trim();
            } else {
                builder.append(descriptionLines[i]);
            }
        }
        mediaTypeTextField.setText(mediaType);
        fileSuffixTextField.setText(suffix);
        descriptionTextArea.setText(builder.toString());
        handleMediaTypeTextField();
    }

    private void setStatusMessage(String message, int seconds, boolean shouldEnableClose) {
        closeButton.setEnabled(false);
        statusMessageLabel.setText(message);
        Timer timer = new Timer(seconds * 1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                closeButton.setEnabled(shouldEnableClose);
                statusMessageLabel.setText("");
            }
        });
        timer.setRepeats(false);
        timer.start();

    }

    private void setStatusMessage(String message, int seconds) {
        setStatusMessage(message, seconds, true);
    }

    private class SourceProvider {

        public InputStream getHexMediaTypesSource() {
            String resource = "HexMediaTypes.mtd";
            return getClass().getClassLoader().getResourceAsStream(resource);
        }

        public InputStream getCommonMediaTypesSource() {
            String resource = "CommonMediaTypes.mtd";
            return getClass().getClassLoader().getResourceAsStream(resource);
        }
    }

}
