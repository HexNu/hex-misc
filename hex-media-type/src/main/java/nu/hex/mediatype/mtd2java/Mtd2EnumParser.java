package nu.hex.mediatype.mtd2java;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import nu.hex.mediatype.Main;

/**
 *
 * @author hln
 */
public class Mtd2EnumParser {

    private final String target;
    private static final String HEX_MEDIA_TYPE_NAME = "HexMediaType";
    private final SourceProvider provider = new SourceProvider();

    public Mtd2EnumParser(String target) {
        this.target = target != null ? target : HEX_MEDIA_TYPE_NAME;
    }

    public String parse() throws IOException {
        StringBuilder builder = new StringBuilder("package nu.hex.mediatype;\n\n");
        // Start of javadoc for class
        builder.append("/**\n")
                .append(" *\n")
                .append(" * DO NOT MODIFY! This enum is autogenerated.\n")
                .append(" *\n")
                .append(" * Changes done here will be owerwritten the next time the project runs.\n")
                .append(" *\n")
                .append(" * To add mediatypes or edit them, run this project and use the editor.\n")
                .append(" *\n")
                .append(" * If the MTD is manually edited, run the project and use the update button.\n")
                .append(" *\n")
                .append(" * To remove a mediatype, remove it manually from the MDT file.\n")
                .append(" *\n")
                .append(" */\n");
        // End of javadoc for class
        // Declaration
        builder.append("public enum ")
                .append(target)
                .append(" {\n\n");
        InputStream stream = target.equals(HEX_MEDIA_TYPE_NAME) ? provider.getHexMediaTypesSource() : provider.getCommonMediaTypesSource();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream, Main.MTD_ENCODING));
        String line;
        int counter = 0;
        // Start of listing
        while ((line = reader.readLine()) != null) {
            // Start of javado for enum
            if (!line.startsWith("MediaType")) {
                counter++;
                String[] keyValues = line.split(";");
                String key = keyValues[0];
                String suffix = "";
                if (counter > 1) {
                    builder.append(",\n");
                }
                builder.append("    /**\n");
                if (keyValues.length > 1) {
                    if (keyValues[1] != null) {
                        suffix = keyValues[1];
                    }
                }
                if (keyValues.length > 2 && keyValues[2] != null) {
                    for (int i = 2; i < keyValues.length; i++) {
                        builder.append("     * ")
                                .append(keyValues[i].trim()).append("<br>\n")
                                .append("     *\n");
                    }
                }
                builder.append("     * <br>\n     * MediaType: <i>")
                        .append(key).append("</i>\n");
                if (!suffix.equals("")) {
                    builder.append("     * <br>\n     * FileSuffix: <i>");
                    String[] suffices = suffix.split(",");
                    int i = 0;
                    for (String s : suffices) {
                        if (i++ > 0) {
                            builder.append(", ");
                        }
                        builder.append(".").append(s.trim());
                    }
                    builder.append("</i>\n");
                }
                builder.append("     */\n");
                // End of javadoc for enum
                // Start of declaration of enum
                builder.append("    ")
                        .append(convertToConstant(key))
                        .append("(\"").append(key).append("\", \"").append(suffix).append("\")");
            }
        }
        builder.append(";\n");
        // End of listing
        // Fields
        builder.append("    private final String mediaType;\n");
        builder.append("    private final String suffices;\n");
        builder.append("\n");
        // Constructor
        builder.append("    private ").append(target).append("(String mediaType, String suffices) {\n");
        builder.append("        this.mediaType = mediaType;\n");
        builder.append("        this.suffices = suffices;\n");
        builder.append("    }\n");
        builder.append("\n");
        // Find by suffix
        builder.append("    public static ").append(target).append(" findBySuffix(String suffix) {\n");
        builder.append("        for (").append(target).append(" type : values()) {\n");
        builder.append("            if (type.suffices.toLowerCase().contains(suffix.toLowerCase())) {\n");
        builder.append("                return type;\n");
        builder.append("            }\n");
        builder.append("        }\n");
        builder.append("        return null;\n");
        builder.append("    }\n");
        builder.append("\n");
        // To String
        builder.append("    @Override\n");
        builder.append("    public String toString() {\n");
        builder.append("        return mediaType;\n");
        builder.append("    }\n");
        builder.append("\n");
        //End of file
        builder.append("}\n");
        return builder.toString();
    }

    private String convertToConstant(String key) {
        return key.replaceAll("[^a-zA-Z0-9]", "_").toUpperCase();
    }

    private class SourceProvider {

        public InputStream getHexMediaTypesSource() {
            String resource = "HexMediaTypes.mtd";
            return getClass().getClassLoader().getResourceAsStream(resource);
        }

        public InputStream getCommonMediaTypesSource() {
            String resource = "CommonMediaTypes.mtd";
            return getClass().getClassLoader().getResourceAsStream(resource);
        }
    }
}
